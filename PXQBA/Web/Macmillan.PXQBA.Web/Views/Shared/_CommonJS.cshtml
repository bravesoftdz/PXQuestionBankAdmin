@using Macmillan.PXQBA.Business.Models
@using Macmillan.PXQBA.Common.Helpers
@using Macmillan.PXQBA.Web.Helpers
@using Macmillan.PXQBA.Web.ViewModels.Editor
@using Macmillan.PXQBA.Web.ViewModels.Filter
@using EnumHelper = Macmillan.PXQBA.Common.Helpers.EnumHelper
<script type="text/javascript">
    (function () {

        var actions = {};
        window.actions = actions;
        actions.questionList = {
            getQuestionListUrl: '@Url.Action("GetQuestionData", "QuestionList")',
            editQuestionFieldUrl: '@Url.Action("UpdateMetadataField", "Question")',
            getQuestionNotesUrl: '@Url.Action("GetQuestionNotes", "QuestionList")',
            createQuestionNoteUrl: '@Url.Action("CreateQuestionNote", "QuestionList")',
            deleteQuestionNotesUrl: '@Url.Action("DeleteQuestionNote", "QuestionList")',
            saveQuestionNoteUrl: '@Url.Action("SaveQuestionNote", "QuestionList")',
            getMetadataFieldsUrl: '@Url.Action("GetAvailibleMetadata", "Question")',
            getDuplicateQuestionTemplateUrl: '@Url.Action("DuplicateQuestion", "Question")',
            getNewQuestionTemplateUrl: '@Url.Action("CreateQuestion", "Question")',
            getQuestionUrl: '@Url.Action("GetQuestion", "Question")',
            updateQuestionUrl: '@Url.Action("UpdateQuestion", "Question")',
            removeFromTitleUrl: '@Url.Action("RemoveFromTitle", "Question")',
            getCourseMetadataUrl: '@Url.Action("GetMetadataForCourse", "QuestionList")',
            flagQuestionUrl: '@Url.Action("FlagQuestion", "Question")',
            getQuestionVersionsUrl: '@Url.Action("GetQuestionVersions", "Question")',
            getAvailibleMetadataByCourseIdUrl: '@Url.Action("GetAvailibleMetadataByCourseId", "Question")',
            updateSharedMetadataFieldUrl: '@Url.Action("UpdateSharedMetadataField", "Question")',
            getVersionPreviewLinkUrl: '@Url.Action("GetVersionPreviewLink", "Question")',
            publishDraftToOriginalUrl: '@Url.Action("PublishDraftToOriginal", "Question")',
            createDraftUrl: '@Url.Action("CreateDraft", "Question")',
            saveAndPublishDraftUrl: '@Url.Action("SaveAndPublishDraft", "Question")',
            deleteQuestionUrl: '@Url.Action("DeleteQuestion", "Question")',
            getUpdatedGraphEditorUrl: '@Url.Action("GetUpdatedGraphEditor", "Question")',
            restoreVersionUrl: '@Url.Action("RestoreVersion", "Question")',

            questionListIndexTamplate: '@Html.Raw(@Url.Action("Index", "QuestionList", new { titleId = "__titleId__", chapterId = "__chapterId__" }))'
        };

        actions.questionList.buildQuestionListIndexUrl = function (titleId, chapterId) {
            if (titleId == null) {
                titleId = '';
            }

            if (chapterId == null) {
                chapterId = '';
            }

            return actions.questionList.questionListIndexTamplate.replace('__titleId__', titleId).replace('__chapterId__', chapterId);
        };

        actions.questionTitle = {
            titleListUrl: '@Url.Action("Index", "ProductCourseList")',
            getTitleDataUrl: '@Url.Action("GetTitleData", "ProductCourseList")'
        };

        actions.metadataCfg = {
            getAvailableCoursesUrl: '@Url.Action("GetAvailableCourses", "Metadata")',
            getMetadataConfigUrl: '@Url.Action("GetMetadataConfig", "Metadata")',
            saveMetadataConfigUrl: '@Url.Action("SaveMetadataConfig", "Metadata")'
        };

        actions.bulkOperations = {
            bulkUpdateMetadataFieldUrl: '@Url.Action("BulkUpdateMetadataField", "Question")',
            removeFromTitleUrl: '@Url.Action("RemoveFromTitle", "Question")',
            publishToTitle: '@Url.Action("PublishToTitle", "Question")'
        };

        actions.questionFilter = {
            getQuestionTypeListUrl: '@Url.Action("GetQuestionTypeList", "QuestionFilter")',
        };

        actions.userOperations = {
            getCurrentUserNotificationForUrl: '@Url.Action("GetCurrentUserNotificationForUrl", "User")',
            dontShowForCurrentUserUrl: '@Url.Action("DontShowForCurrentUser", "User")',
            getRolesForCourseUrl: '@Url.Action("GetRolesForCourse", "User")',
            getNewRoleTemplateUrl: '@Url.Action("GetNewRoleTemplate", "User")',
            saveRoleUrl: '@Url.Action("SaveRole", "User")',
            removeRoleUrl: '@Url.Action("DeleteRole", "User")',
            getRoleCapabilitiesUrl: '@Url.Action("GetRoleCapabilities", "User")',
            getUsersUrl: '@Url.Action("GetUsers", "User")',
            getAvailibleTitlesUrl: '@Url.Action("GetAvailibleTitles", "User")',
            getUserRolesUrl: '@Url.Action("GetUserRoles", "User")',
            saveUserRolesUrl: '@Url.Action("SaveUserRoles", "User")',
            getAllCoursesUrl: '@Url.Action("GetAllCourses", "User")'
        };

        var enums = {};
        window.enums = enums;
        enums.orderType = {
            none: '@SortType.None.ToString().ToLower()',
            asc: '@SortType.Asc.ToString().ToLower()',
            desc: '@SortType.Desc.ToString().ToLower()',
        };

        enums.editorType = {
            none: '@EditorType.None.ToString().ToLower()',
            singleSelect: '@EditorType.SingleSelect.ToString().ToLower()',
            text: '@EditorType.Text.ToString().ToLower()',
            number: '@EditorType.Number.ToString().ToLower()',
            multiSelect: '@EditorType.MultiSelect.ToString().ToLower()',
            multiText: '@EditorType.MultilineText.ToString().ToLower()',
            keywords: '@EditorType.Keywords.ToString().ToLower()'
        };


        enums.filterType = {
            none: '@FilterType.None.ToString().ToLower()',
            multiSelectWithAddition: '@FilterType.MultiSelectWithAddition.ToString().ToLower()',
            singleSelect: '@FilterType.SingleSelect.ToString().ToLower()',
            text: '@FilterType.Text.ToString().ToLower()',
        };

        enums.messages = {
            succesCreate: 'Question successfully created',
            succesUpdate: 'Question successfully updated',
            errorMessage: 'Error occurred, please try again later',
            warningQuestionEditorMessage: 'You must supply correct body and answers for this question before save.'
        };

        enums.dialogCaptions = {
            newQuestion: 'New Question',
            duplicateQuestion: 'Duplicate Question',
            editQuestion: 'Edit Question'
        };

        enums.flag = {
            flagged: '@((int)QuestionFlag.Flagged)',
            notFlagged: '@((int)QuestionFlag.NotFlagged)'
        };

        enums.questionType = {
            graphDisplayName: '@QuestionTypeHelper.GetDisplayName("custom", QuestionTypeHelper.GraphType)',
            htsDisplayName: '@QuestionTypeHelper.GetDisplayName("custom", QuestionTypeHelper.HTSType)'
        };


        enums.statuses = {
            availibleToInstructor: '@EnumHelper.GetEnumDescription(QuestionStatus.AvailableToInstructors)',
            deleted: '@EnumHelper.GetEnumDescription(QuestionStatus.Deleted)',
            inProgress: '@EnumHelper.GetEnumDescription(QuestionStatus.InProgress)',
        };

        enums.statusesId = {
            availibleToInstructor: '@((int)QuestionStatus.AvailableToInstructors)',
            deleted: '@((int)QuestionStatus.Deleted)',
            inProgress: '@((int)QuestionStatus.InProgress)',
        };

        enums.notificationTypes = {
            editInPlaceQuestionInProgress: '@((int)NotificationType.EditInPlaceQuestionInProgress)',
            newDraftForAvailableToInstructors: '@((int)NotificationType.NewDraftForAvailableToInstructors)',
            publishChangesMadeWithinDraft: '@((int)NotificationType.PublishChangesMadeWithinDraft)',
            saveAndPublishDraft: '@((int)NotificationType.SaveAndPublishDraft)'
        };

        enums.metadataFieldType = {            
            text: '@((int)MetadataFieldType.Text)',
            multilineText: '@((int)MetadataFieldType.MultilineText)',
            itemLink: '@((int)MetadataFieldType.ItemLink)',
            keywords: '@((int)MetadataFieldType.Keywords)'
        };

        var consts = {};
        window.consts = consts;

        consts.questionTitleName = '@MetadataFieldNames.DlapTitle';
        consts.questionStatusName = '@MetadataFieldNames.QuestionStatus';
        consts.questionCourseName = '@MetadataFieldNames.ProductCourse';
        consts.targetProductCourse = '@MetadataFieldNames.TargetProductCourse';
        consts.questionChapterName = '@MetadataFieldNames.Chapter';
        consts.questionBankName = '@MetadataFieldNames.Bank';
        consts.questionSharedWithName = '@MetadataFieldNames.SharedWith';
        consts.questionTypeName = '@MetadataFieldNames.DlapType';
        consts.questionDraftFlagName = '@MetadataFieldNames.DraftFrom';
        consts.containsTextName = '@MetadataFieldNames.ContainsText';

        consts.grid = {
            initialFieldSet: '@GridHelper.GetInitialFieldSet()',
        };
        
        window.content = {
            img: {                
                displayOptionsHelp: {
                    questionsInCurrentQuizUrl:
                        '@Url.Content("~/Content/img/displayOptionsHelp/Screenshot_LaunchPad_Question Picker (Questions in Current Quiz).png")',
                    questionsInQuestionBanksUrl:
                        '@Url.Content("~/Content/img/displayOptionsHelp/Screenshot_LaunchPad_Question Picker (Questions in Question Banks).png")',
                    quizInstructorViewUrl:
                        '@Url.Content("~/Content/img/displayOptionsHelp/Screenshot_LaunchPad_Quiz Instructor View.png")',
                    resourcePanelUrl:
                        '@Url.Content("~/Content/img/displayOptionsHelp/Screenshot_LaunchPad_Resource_Panel.png")',
                },
            },
    };
    }
     )();
</script>