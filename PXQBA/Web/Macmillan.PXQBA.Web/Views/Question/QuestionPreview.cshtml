@using System.Text.RegularExpressions
@using Macmillan.PXQBA.Common.Helpers
@model Macmillan.PXQBA.Business.Models.Question

<div class="@(Model.CustomUrl == QuestionTypeHelper.GraphType ? "question-preview  graph" : "question-preview")">
    <div class="question-body">@Model.Body </div>

    @if (!string.IsNullOrEmpty(Model.Preview) && @Model.InteractionType == "custom")
    {
        @Html.Raw(Model.Preview)
    }
    else
    {
        var re = new Regex(@"\s+");
        switch (Model.InteractionType)
        {


            case "answer":


                if (Model.Choices != null && Model.Choices.Count > 0)
                {
                    var answers = Model.AnswerList;
                    <ul>
                        @foreach (var choice in Model.Choices)
                        {
                            string cid = re.Replace(choice.Id, "").ToLower();
                            string answerChecked = answers.Contains(cid) ? "checked=checked" : "";

                            <li>
                                <input disabled="disabled" type="checkbox" @(answerChecked) />
                                <span class="option-text">@choice.Text</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>This question has no options.</p>
                }

                break;
            case "choice":

                if (Model.Choices != null && Model.Choices.Count > 0)
                {
                    string answer = Model.Answer != null ? re.Replace(Model.Answer, "").ToLower() : "No answer provided";
                    <ul>
                        @foreach (var choice in Model.Choices)
                        {
                            string choiceValue = re.Replace(choice.Text, "").ToLower();
                            string chioceId = re.Replace(choice.Id, "").ToLower();

                            <li>
                                <input disabled="disabled" type="radio" @((answer == choiceValue || answer == chioceId) ? "checked='checked'" : "") />
                                <span class="option-text">@choice.Text</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>This question has no options.</p>
                }
                break;
            case "text":
                if (Model.AnswerList != null && Model.AnswerList.Count > 1)
                {
                    <b>Correct answers:</b>
                    <p>@string.Join(", ", Model.AnswerList)</p>
                }
                else
                {
                    <b>Correct answer:</b>
                    <p>@(string.IsNullOrEmpty(Model.Answer) ? "No answer provided" : Model.Answer)</p>
                }

                break;
            case "match":
                if (Model.Choices != null && Model.Choices.Count > 0)
                {
                    <ul>
                        @foreach (var choice in Model.Choices)
                        {
                            <li>
                                <span class="option-text">@(choice.Text + " = " + choice.Answer)</span>
                            </li>
                        }

                    </ul>
                }
                else
                {
                    <p>Can't show details for this type of question.</p>
                }
                break;
            default:
                break;
        }
    }
</div>