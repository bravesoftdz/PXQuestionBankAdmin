using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.Web;

using Bfw.Agilix.Dlap.Configuration;

namespace Bfw.Agilix.Dlap.Session
{
    /// <summary>
    /// Base class for ISessionManager implementations that contains some 
    /// simple helper methods.
    /// </summary>
    public abstract class SessionManagerBase : ISessionManager
    {
        #region Properties

        /// <summary>
        /// Configuration section that stores all of the DLAP connection information.
        /// </summary>
        private SessionManagerSection configuration = null;

        /// <summary>
        /// Configuration section that stores all of the DLAP connection information.
        /// </summary>
        /// <value>Set <see cref="configuration"/></value>
        protected SessionManagerSection Configuration
        {
            get
            {
                if (this.configuration == null)
                {
                    this.configuration = ConfigurationManager.GetSection("agilixSessionManager") as SessionManagerSection;
                }

                return this.configuration;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Initializes DlapConnection configured based on the information contained in
        /// the agilixSessionManager configSection.
        /// </summary>
        /// <returns>Initialized DlapConnection.</returns>
        protected DlapConnection ConfigureConnection()
        {
            DlapConnection conn = null;

            Logger.Log("Configuring connection", Common.Logging.LogSeverity.Error);
            if (null != Configuration)
            {
                conn = ConnectionFactory.GetDlapConnection(Configuration.Connection.Url);
                conn.Timeout = Configuration.Connection.Timeout;
                conn.UseCompression = Configuration.Connection.Compress;
                conn.UserAgent = Configuration.Connection.Agent;
                conn.TrustHeaderKey = Configuration.Connection.SecretKey;
                conn.Logger = Logger;
                conn.Tracer = Tracer;                
            }

            return conn;
        }

        /// <summary>
        /// Sends the GetCookie command to DLAP. This will return the authentication cookie for the user
        /// authenticated in the given session.
        /// </summary>
        /// <param name="connection">Connection to the DLAP server to get cookies from.</param>
        /// <returns></returns>
        protected DlapResponse GetCookie(DlapConnection connection)
        {
            var request = new DlapRequest()
            {
                Type = DlapRequestType.Get,
                Attributes = new Dictionary<string, object>() { { "cmd", "getcookie" } }
            };

            return connection.Send(request);
        }

        /// <summary>
        /// Logs in the specified user.
        /// </summary>
        /// <param name="connection">Connection to the DLAP server to authenticate against.</param>
        /// <param name="user">Name of the user to authenticate.</param>
        /// <param name="password">Password of the user.</param>
        /// <returns>Response generated by DLAP when authentication is attempted.</returns>
        protected DlapResponse Login(DlapConnection connection, string user, string password)
        {
            Logger.Log(string.Format("Login({0}, {1})", user, password), Common.Logging.LogSeverity.Error);
            var request = new DlapRequest()
            {
                Type = DlapRequestType.Post,
                Attributes = new Dictionary<string, object>() { { "cmd", "login" }, { "username", user }, { "password", password } }
            };

            connection.Logger = Logger;
            connection.Tracer = Tracer;
            connection.TrustHeaderUsername = user;

            return connection.Send(request);
        }

        /// <summary>
        /// Logs in the annonymous user, if configured.
        /// </summary>
        /// <param name="connection">Connection to the DLAP server to authenticate against.</param>
        /// <returns>Response generated by DLAP when authentication is attempted.</returns>
        protected DlapResponse LoginAnnonymous(DlapConnection connection)
        {
            if (null == Configuration.AnnonymousUser || string.IsNullOrEmpty(Configuration.AnnonymousUser.Username) || string.IsNullOrEmpty(Configuration.AnnonymousUser.Password))
                return new DlapResponse() { Code = DlapResponseCode.InvalidCredentials };

            return Login(connection, Configuration.AnnonymousUser.Username, Configuration.AnnonymousUser.Password);
        }

        /// <summary>
        /// Grabs the user id from the loginResponse element and sets the UserId/> property.
        /// </summary>
        /// <param name="session">Session to set the UserId property of.</param>
        /// <param name="loginResponse">Response from a successful Login request.</param>
        protected void SetSessionUserId(ISession session, DlapResponse loginResponse)
        {
            if (null != loginResponse.ResponseXml.Root)
            {
                var idAttribute = loginResponse.ResponseXml.Root.Attribute("userid");

                if (null != idAttribute)
                {
                    session.UserId = idAttribute.Value;

                    if (null != Configuration.AnnonymousUser && !string.IsNullOrEmpty(Configuration.AnnonymousUser.Id) && Configuration.AnnonymousUser.Id == session.UserId)
                    {
                        session.IsAnnonymous = true;
                    }
                }
            }
        }

        #endregion

        #region ISessionManager Members

        /// <summary>
        /// The currently active session.
        /// </summary>
        /// <value>Always returns null in base class implementation.</value>
        public virtual ISession CurrentSession
        {
            get
            {
                return null;
            }
            set
            {
            }
        }

        /// <summary>
        /// The ILogger instance to use for logging.
        /// </summary>
        public virtual Bfw.Common.Logging.ILogger Logger { get; set; }

        /// <summary>
        /// The ITraceManager instance to use for tracing.
        /// </summary>
        public virtual Bfw.Common.Logging.ITraceManager Tracer { get; set; }

        /// <summary>
        /// Terminates an existing session.
        /// </summary>
        /// <param name="session"></param>
        public virtual void EndSession(ISession session) { }

        /// <summary>
        /// Returns a session initialized based on existing state information.
        /// </summary>
        /// <returns></returns>
        public virtual ISession ResumeSession(string username, string userId, TimeZoneInfo timeZoneInfo)
        {
            return null;
        }

        /// <summary>
        /// Starts a new session as the anonymous user.
        /// </summary>
        /// <returns>Session initialized with the anonymous user logged in.</returns>
        public virtual ISession StartAnnonymousSession()
        {
            return null;
        }

        /// <summary>
        /// Starts a new session as the anonymous user.
        /// </summary>
        /// <returns>Session initialized with the anonymous user logged in.</returns>
        public virtual ISession StartAnnonymousSessionWithOwner(string publicViewOwnerUserId)
        {
            return null;
        }


        /// <summary>
        /// Starts a new session as the specified user. This method SHOULD NOT set the <see cref="CurrentSession"/> property.
        /// </summary>
        /// <param name="username">User name to authenticate as.</param>
        /// <param name="password">Password for the user.</param>
        /// <param name="loginToBrainHoney">Login to BrainHoney</param>
        /// <param name="userId">User Id</param>
        /// <returns>Session that has been fully initialized and the user credentials provided used to log in.</returns>
        public virtual ISession StartNewSession(string username, string password, bool loginToBrainHoney, string userId)
        {
            return null;
        }

        /// <summary>
        /// Creates a new WebSession and returns it.
        /// </summary>
        /// <param name="username">User name to authenticate as.</param>
        /// <param name="password">Password for the user.</param>
        /// <param name="loginToBrainHoney">Login to BrainHoney</param>
        /// <param name="userId">User Id</param>
        /// <param name="timeZoneInfo">Time Zone info of the course or user</param>
        /// <returns>
        /// New WebSession if connection to DLAP is successful.
        /// </returns>
        /// <exception cref="DlapException">On any error establishing a connection to DLAP.</exception>
        public virtual ISession StartNewSession(string username, string password, bool loginToBrainHoney, string userId, TimeZoneInfo timeZoneInfo)
        {
            return null;
        }

        #endregion
    }
}