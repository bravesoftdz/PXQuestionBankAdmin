#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bfw.PX.Notes
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Reflection;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "PXData")]
    public partial class NotesDataClassesDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertHighlightNote(HighlightNote instance);
        partial void UpdateHighlightNote(HighlightNote instance);
        partial void DeleteHighlightNote(HighlightNote instance);
        partial void InsertUserType(UserType instance);
        partial void UpdateUserType(UserType instance);
        partial void DeleteUserType(UserType instance);
        partial void InsertHighlight(Highlight instance);
        partial void UpdateHighlight(Highlight instance);
        partial void DeleteHighlight(Highlight instance);
        partial void InsertItemHighlight(ItemHighlight instance);
        partial void UpdateItemHighlight(ItemHighlight instance);
        partial void DeleteItemHighlight(ItemHighlight instance);
        partial void InsertItemNote(ItemNote instance);
        partial void UpdateItemNote(ItemNote instance);
        partial void DeleteItemNote(ItemNote instance);
        partial void InsertReviewHighlight(ReviewHighlight instance);
        partial void UpdateReviewHighlight(ReviewHighlight instance);
        partial void DeleteReviewHighlight(ReviewHighlight instance);
        partial void InsertReviewNote(ReviewNote instance);
        partial void UpdateReviewNote(ReviewNote instance);
        partial void DeleteReviewNote(ReviewNote instance);
        partial void InsertSubmissionHighlight(SubmissionHighlight instance);
        partial void UpdateSubmissionHighlight(SubmissionHighlight instance);
        partial void DeleteSubmissionHighlight(SubmissionHighlight instance);
        partial void InsertSubmissionNote(SubmissionNote instance);
        partial void UpdateSubmissionNote(SubmissionNote instance);
        partial void DeleteSubmissionNote(SubmissionNote instance);
        partial void InsertUserNoteSetting(UserNoteSetting instance);
        partial void UpdateUserNoteSetting(UserNoteSetting instance);
        partial void DeleteUserNoteSetting(UserNoteSetting instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertNote(Note instance);
        partial void UpdateNote(Note instance);
        partial void DeleteNote(Note instance);
        partial void InsertUserShare(UserShare instance);
        partial void UpdateUserShare(UserShare instance);
        partial void DeleteUserShare(UserShare instance);
        #endregion

        public NotesDataClassesDataContext() :
            base(global::Bfw.PX.Notes.Properties.Settings.Default.PXData, mappingSource)
        {
            OnCreated();
        }

        public NotesDataClassesDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public NotesDataClassesDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public NotesDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public NotesDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<HighlightNote> HighlightNotes
        {
            get
            {
                return this.GetTable<HighlightNote>();
            }
        }

        public System.Data.Linq.Table<UserType> UserTypes
        {
            get
            {
                return this.GetTable<UserType>();
            }
        }

        public System.Data.Linq.Table<Highlight> Highlights
        {
            get
            {
                return this.GetTable<Highlight>();
            }
        }

        public System.Data.Linq.Table<ItemHighlight> ItemHighlights
        {
            get
            {
                return this.GetTable<ItemHighlight>();
            }
        }

        public System.Data.Linq.Table<ItemNote> ItemNotes
        {
            get
            {
                return this.GetTable<ItemNote>();
            }
        }

        public System.Data.Linq.Table<ReviewHighlight> ReviewHighlights
        {
            get
            {
                return this.GetTable<ReviewHighlight>();
            }
        }

        public System.Data.Linq.Table<ReviewNote> ReviewNotes
        {
            get
            {
                return this.GetTable<ReviewNote>();
            }
        }

        public System.Data.Linq.Table<SubmissionHighlight> SubmissionHighlights
        {
            get
            {
                return this.GetTable<SubmissionHighlight>();
            }
        }

        public System.Data.Linq.Table<SubmissionNote> SubmissionNotes
        {
            get
            {
                return this.GetTable<SubmissionNote>();
            }
        }

        public System.Data.Linq.Table<UserNoteSetting> UserNoteSettings
        {
            get
            {
                return this.GetTable<UserNoteSetting>();
            }
        }

        public System.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public System.Data.Linq.Table<Note> Notes
        {
            get
            {
                return this.GetTable<Note>();
            }
        }

        public System.Data.Linq.Table<UserShare> UserShares
        {
            get
            {
                return this.GetTable<UserShare>();
            }
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateNote")]
        public int UpdateNote([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), noteId, noteText);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetItemNotes")]
        public int GetItemNotes([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Xml")] System.Xml.Linq.XElement reqXml)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reqXml);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetReviewNotes")]
        public int GetReviewNotes([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Xml")] System.Xml.Linq.XElement reqXml)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reqXml);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetSubmissionNotes")]
        public int GetSubmissionNotes([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Xml")] System.Xml.Linq.XElement reqXml)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reqXml);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.SetHighlightNoteRelation")]
        public int SetHighlightNoteRelation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, noteId);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.ShareHighlight")]
        public int ShareHighlight([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, @public);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.ShareNote")]
        public int ShareNote([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), noteId, @public);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.ShareNotes")]
        public int ShareNotes([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string studentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string sharedStudentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstNameSharer, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastNameSharer, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstNameSharee, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastNameSharee)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentId, courseId, sharedStudentId, firstNameSharer, lastNameSharer, firstNameSharee, lastNameSharee);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.StopSharingToUser")]
        public int StopSharingToUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string studentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string sharedStudentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentId, sharedStudentId, courseId);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddHighlight")]
        public int AddHighlight([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string highlightText, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(300)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> highlightType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string color, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(1000)")] string start, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> startOffset, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(1000)")] string end, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> endOffset, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] ref System.Nullable<System.Guid> highlightId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightText, description, highlightType, itemId, reviewId, enrollmentId, courseId, @public, userId, firstName, lastName, color, start, startOffset, end, endOffset, highlightId);
            highlightId = ((System.Nullable<System.Guid>)(result.GetParameterValue(16)));
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateHighlightColor")]
        public int UpdateHighlightColor([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string color)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, color);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetNoteCount")]
        public ISingleResult<GetNoteCountResult> GetNoteCount([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> highlightType)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, reviewId, courseId, userId, enrollmentId, highlightType);
            return ((ISingleResult<GetNoteCountResult>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddNote")]
        public int AddNote([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(300)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> noteType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> isGeneralNote, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), noteID, noteText, description, noteType, isGeneralNote, itemId, reviewId, enrollmentId, @public, userId, firstName, lastName, courseId);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddVideoNote")]
        public int AddVideoNote([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string videoId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "bigint")] Int64 minTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "bigint")] Int64 maxTime, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "int")] int accessType)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), noteID, noteText, itemId, videoId, userId, firstName, lastName, courseId, minTime, maxTime, accessType);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddHighlightNote")]
        public int AddHighlightNote(
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string highlightText,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(300)")] string description,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> highlightType,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string color,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> highlightpublic,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> notepublic,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] ref System.Nullable<System.Guid> highlightId,
                    [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] ref System.Nullable<System.Guid> noteId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightText, description, noteText, highlightType, itemId, reviewId, enrollmentId, courseId, userId, firstName, lastName, color, highlightpublic, notepublic, highlightId, noteId);
            highlightId = ((System.Nullable<System.Guid>)(result.GetParameterValue(14)));
            noteId = ((System.Nullable<System.Guid>)(result.GetParameterValue(15)));
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddNoteToHighlight")]
        public int AddNoteToHighlight([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(300)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> noteType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] ref System.Nullable<System.Guid> noteId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, noteText, description, noteType, itemId, reviewId, enrollmentId, @public, userId, firstName, lastName, courseId, noteId);
            noteId = ((System.Nullable<System.Guid>)(result.GetParameterValue(12)));
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.AddNoteToTopNote")]
        public int AddNoteToTopNote([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> topNoteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(MAX)")] string noteText, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(300)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> noteType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name = "public", DbType = "Bit")] System.Nullable<bool> @public, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] ref System.Nullable<System.Guid> noteId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topNoteId, noteText, description, noteType, itemId, reviewId, enrollmentId, @public, userId, firstName, lastName, courseId, noteId);
            noteId = ((System.Nullable<System.Guid>)(result.GetParameterValue(12)));
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateNoteSettings")]
        public int UpdateNoteSettings([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string studentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string sharerId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> sharerHighlights, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> sharerNotes, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> myHighlights, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> myNotes, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> instHighlights, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> instNotes)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentId, courseId, sharerId, sharerHighlights, sharerNotes, myHighlights, myNotes, instHighlights, instNotes);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.InitializeUser")]
        public int InitializeUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> userType)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, firstName, lastName, courseId, userType);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetNoteSettings")]
        public int GetNoteSettings([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string studentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), studentId, courseId, itemId, reviewId, enrollmentId);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateHighlightStatus")]
        public int UpdateHighlightStatus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> updateOnlyEmptyHighlights, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> status)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, userId, itemId, reviewId, courseId, enrollmentId, updateOnlyEmptyHighlights, status);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateNoteStatus")]
        public int UpdateNoteStatus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> highlightId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string reviewId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "NVarChar(50)")] string enrollmentId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> updateParentHighlight, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> status)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightId, noteId, userId, itemId, reviewId, courseId, enrollmentId, updateParentHighlight, status);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.UpdateVideoNoteStatus")]
        public int UpdateVideoNoteStatus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "UniqueIdentifier")] System.Nullable<System.Guid> noteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "bit")] System.Nullable<bool> isDeleted)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), noteId, isDeleted);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetNotesByUser")]
        public ISingleResult<GetNotesByUserResult> GetNotesByUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> highlightType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string courseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string enrollmentId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), highlightType, userId, courseId, enrollmentId);
            return ((ISingleResult<GetNotesByUserResult>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.GetNotesForPeerReview")]
        public int GetNotesForPeerReview([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(50)")] string userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string enrollmentIds)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, enrollmentIds);
            return ((int)(result.ReturnValue));
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.HighlightNotes")]
    public partial class HighlightNote : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _HighlightId;

        private System.Guid _NoteId;

        private EntityRef<Highlight> _Highlight;

        private EntityRef<Note> _Note;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnHighlightIdChanging(System.Guid value);
        partial void OnHighlightIdChanged();
        partial void OnNoteIdChanging(System.Guid value);
        partial void OnNoteIdChanged();
        #endregion

        public HighlightNote()
        {
            this._Highlight = default(EntityRef<Highlight>);
            this._Note = default(EntityRef<Note>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    if (this._Highlight.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnHighlightIdChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightId = value;
                    this.SendPropertyChanged("HighlightId");
                    this.OnHighlightIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    if (this._Note.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNoteIdChanging(value);
                    this.SendPropertyChanging();
                    this._NoteId = value;
                    this.SendPropertyChanged("NoteId");
                    this.OnNoteIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_HighlightNote", Storage = "_Highlight", ThisKey = "HighlightId", OtherKey = "HighlightId", IsForeignKey = true)]
        public Highlight Highlight
        {
            get
            {
                return this._Highlight.Entity;
            }
            set
            {
                Highlight previousValue = this._Highlight.Entity;
                if (((previousValue != value)
                            || (this._Highlight.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Highlight.Entity = null;
                        previousValue.HighlightNotes.Remove(this);
                    }
                    this._Highlight.Entity = value;
                    if ((value != null))
                    {
                        value.HighlightNotes.Add(this);
                        this._HighlightId = value.HighlightId;
                    }
                    else
                    {
                        this._HighlightId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Highlight");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_HighlightNote", Storage = "_Note", ThisKey = "NoteId", OtherKey = "NoteId", IsForeignKey = true)]
        public Note Note
        {
            get
            {
                return this._Note.Entity;
            }
            set
            {
                Note previousValue = this._Note.Entity;
                if (((previousValue != value)
                            || (this._Note.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Note.Entity = null;
                        previousValue.HighlightNotes.Remove(this);
                    }
                    this._Note.Entity = value;
                    if ((value != null))
                    {
                        value.HighlightNotes.Add(this);
                        this._NoteId = value.NoteId;
                    }
                    else
                    {
                        this._NoteId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Note");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UserTypes")]
    public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private string _UserId;

        private string _CourseId;

        private int _Type;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnCourseIdChanging(string value);
        partial void OnCourseIdChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        #endregion

        public UserType()
        {
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this.OnCourseIdChanging(value);
                    this.SendPropertyChanging();
                    this._CourseId = value;
                    this.SendPropertyChanged("CourseId");
                    this.OnCourseIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Type", DbType = "Int NOT NULL")]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if ((this._Type != value))
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserType", Storage = "_User", ThisKey = "UserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UserTypes.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UserTypes.Add(this);
                        this._UserId = value.UserId;
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Highlights")]
    public partial class Highlight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _HighlightId;

        private string _Text;

        private string _Description;

        private bool _Public;

        private int _Status;

        private string _UserId;

        private System.DateTime _Created;

        private System.DateTime _Modified;

        private string _Color;

        private string _Start;

        private System.Nullable<int> _StartOffset;

        private string _End;

        private System.Nullable<int> _EndOffset;

        private EntitySet<HighlightNote> _HighlightNotes;

        private EntitySet<ItemHighlight> _ItemHighlights;

        private EntitySet<ReviewHighlight> _ReviewHighlights;

        private EntitySet<SubmissionHighlight> _SubmissionHighlights;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnHighlightIdChanging(System.Guid value);
        partial void OnHighlightIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPublicChanging(bool value);
        partial void OnPublicChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnModifiedChanging(System.DateTime value);
        partial void OnModifiedChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnStartChanging(string value);
        partial void OnStartChanged();
        partial void OnStartOffsetChanging(System.Nullable<int> value);
        partial void OnStartOffsetChanged();
        partial void OnEndChanging(string value);
        partial void OnEndChanged();
        partial void OnEndOffsetChanging(System.Nullable<int> value);
        partial void OnEndOffsetChanged();
        #endregion

        public Highlight()
        {
            this._HighlightNotes = new EntitySet<HighlightNote>(new Action<HighlightNote>(this.attach_HighlightNotes), new Action<HighlightNote>(this.detach_HighlightNotes));
            this._ItemHighlights = new EntitySet<ItemHighlight>(new Action<ItemHighlight>(this.attach_ItemHighlights), new Action<ItemHighlight>(this.detach_ItemHighlights));
            this._ReviewHighlights = new EntitySet<ReviewHighlight>(new Action<ReviewHighlight>(this.attach_ReviewHighlights), new Action<ReviewHighlight>(this.detach_ReviewHighlights));
            this._SubmissionHighlights = new EntitySet<SubmissionHighlight>(new Action<SubmissionHighlight>(this.attach_SubmissionHighlights), new Action<SubmissionHighlight>(this.detach_SubmissionHighlights));
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    this.OnHighlightIdChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightId = value;
                    this.SendPropertyChanged("HighlightId");
                    this.OnHighlightIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Text", DbType = "NVarChar(MAX)")]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if ((this._Text != value))
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(300)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "[Public]", Storage = "_Public", DbType = "Bit NOT NULL")]
        public bool Public
        {
            get
            {
                return this._Public;
            }
            set
            {
                if ((this._Public != value))
                {
                    this.OnPublicChanging(value);
                    this.SendPropertyChanging();
                    this._Public = value;
                    this.SendPropertyChanged("Public");
                    this.OnPublicChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Status", DbType = "Int NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if ((this._Status != value))
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Created", DbType = "DateTime NOT NULL")]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if ((this._Created != value))
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Modified", DbType = "DateTime NOT NULL")]
        public System.DateTime Modified
        {
            get
            {
                return this._Modified;
            }
            set
            {
                if ((this._Modified != value))
                {
                    this.OnModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._Modified = value;
                    this.SendPropertyChanged("Modified");
                    this.OnModifiedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Color", DbType = "NVarChar(50)")]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if ((this._Color != value))
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Start", DbType = "NVarChar(1000)")]
        public string Start
        {
            get
            {
                return this._Start;
            }
            set
            {
                if ((this._Start != value))
                {
                    this.OnStartChanging(value);
                    this.SendPropertyChanging();
                    this._Start = value;
                    this.SendPropertyChanged("Start");
                    this.OnStartChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartOffset", DbType = "Int")]
        public System.Nullable<int> StartOffset
        {
            get
            {
                return this._StartOffset;
            }
            set
            {
                if ((this._StartOffset != value))
                {
                    this.OnStartOffsetChanging(value);
                    this.SendPropertyChanging();
                    this._StartOffset = value;
                    this.SendPropertyChanged("StartOffset");
                    this.OnStartOffsetChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "[End]", Storage = "_End", DbType = "NVarChar(1000)")]
        public string End
        {
            get
            {
                return this._End;
            }
            set
            {
                if ((this._End != value))
                {
                    this.OnEndChanging(value);
                    this.SendPropertyChanging();
                    this._End = value;
                    this.SendPropertyChanged("End");
                    this.OnEndChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndOffset", DbType = "Int")]
        public System.Nullable<int> EndOffset
        {
            get
            {
                return this._EndOffset;
            }
            set
            {
                if ((this._EndOffset != value))
                {
                    this.OnEndOffsetChanging(value);
                    this.SendPropertyChanging();
                    this._EndOffset = value;
                    this.SendPropertyChanged("EndOffset");
                    this.OnEndOffsetChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_HighlightNote", Storage = "_HighlightNotes", ThisKey = "HighlightId", OtherKey = "HighlightId")]
        public EntitySet<HighlightNote> HighlightNotes
        {
            get
            {
                return this._HighlightNotes;
            }
            set
            {
                this._HighlightNotes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_ItemHighlight", Storage = "_ItemHighlights", ThisKey = "HighlightId", OtherKey = "HighlightId")]
        public EntitySet<ItemHighlight> ItemHighlights
        {
            get
            {
                return this._ItemHighlights;
            }
            set
            {
                this._ItemHighlights.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_ReviewHighlight", Storage = "_ReviewHighlights", ThisKey = "HighlightId", OtherKey = "HighlightId")]
        public EntitySet<ReviewHighlight> ReviewHighlights
        {
            get
            {
                return this._ReviewHighlights;
            }
            set
            {
                this._ReviewHighlights.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_SubmissionHighlight", Storage = "_SubmissionHighlights", ThisKey = "HighlightId", OtherKey = "HighlightId")]
        public EntitySet<SubmissionHighlight> SubmissionHighlights
        {
            get
            {
                return this._SubmissionHighlights;
            }
            set
            {
                this._SubmissionHighlights.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Highlight", Storage = "_User", ThisKey = "UserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Highlights.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Highlights.Add(this);
                        this._UserId = value.UserId;
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_HighlightNotes(HighlightNote entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = this;
        }

        private void detach_HighlightNotes(HighlightNote entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = null;
        }

        private void attach_ItemHighlights(ItemHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = this;
        }

        private void detach_ItemHighlights(ItemHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = null;
        }

        private void attach_ReviewHighlights(ReviewHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = this;
        }

        private void detach_ReviewHighlights(ReviewHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = null;
        }

        private void attach_SubmissionHighlights(SubmissionHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = this;
        }

        private void detach_SubmissionHighlights(SubmissionHighlight entity)
        {
            this.SendPropertyChanging();
            entity.Highlight = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ItemHighlights")]
    public partial class ItemHighlight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _HighlightId;

        private string _ItemId;

        private string _CourseId;

        private EntityRef<Highlight> _Highlight;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnHighlightIdChanging(System.Guid value);
        partial void OnHighlightIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnCourseIdChanging(string value);
        partial void OnCourseIdChanged();
        #endregion

        public ItemHighlight()
        {
            this._Highlight = default(EntityRef<Highlight>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    if (this._Highlight.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnHighlightIdChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightId = value;
                    this.SendPropertyChanged("HighlightId");
                    this.OnHighlightIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this.OnCourseIdChanging(value);
                    this.SendPropertyChanging();
                    this._CourseId = value;
                    this.SendPropertyChanged("CourseId");
                    this.OnCourseIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_ItemHighlight", Storage = "_Highlight", ThisKey = "HighlightId", OtherKey = "HighlightId", IsForeignKey = true)]
        public Highlight Highlight
        {
            get
            {
                return this._Highlight.Entity;
            }
            set
            {
                Highlight previousValue = this._Highlight.Entity;
                if (((previousValue != value)
                            || (this._Highlight.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Highlight.Entity = null;
                        previousValue.ItemHighlights.Remove(this);
                    }
                    this._Highlight.Entity = value;
                    if ((value != null))
                    {
                        value.ItemHighlights.Add(this);
                        this._HighlightId = value.HighlightId;
                    }
                    else
                    {
                        this._HighlightId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Highlight");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ItemNotes")]
    public partial class ItemNote : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private string _ItemId;

        private System.Guid _NoteId;

        private string _CourseId;

        private EntityRef<Note> _Note;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnNoteIdChanging(System.Guid value);
        partial void OnNoteIdChanged();
        partial void OnCourseIdChanging(string value);
        partial void OnCourseIdChanged();
        #endregion

        public ItemNote()
        {
            this._Note = default(EntityRef<Note>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    if (this._Note.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNoteIdChanging(value);
                    this.SendPropertyChanging();
                    this._NoteId = value;
                    this.SendPropertyChanged("NoteId");
                    this.OnNoteIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this.OnCourseIdChanging(value);
                    this.SendPropertyChanging();
                    this._CourseId = value;
                    this.SendPropertyChanged("CourseId");
                    this.OnCourseIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_ItemNote", Storage = "_Note", ThisKey = "NoteId", OtherKey = "NoteId", IsForeignKey = true)]
        public Note Note
        {
            get
            {
                return this._Note.Entity;
            }
            set
            {
                Note previousValue = this._Note.Entity;
                if (((previousValue != value)
                            || (this._Note.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Note.Entity = null;
                        previousValue.ItemNotes.Remove(this);
                    }
                    this._Note.Entity = value;
                    if ((value != null))
                    {
                        value.ItemNotes.Add(this);
                        this._NoteId = value.NoteId;
                    }
                    else
                    {
                        this._NoteId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Note");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ReviewHighlights")]
    public partial class ReviewHighlight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _HighlightId;

        private string _ReviewId;

        private string _ItemId;

        private string _EnrollmentId;

        private EntityRef<Highlight> _Highlight;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnHighlightIdChanging(System.Guid value);
        partial void OnHighlightIdChanged();
        partial void OnReviewIdChanging(string value);
        partial void OnReviewIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnEnrollmentIdChanging(string value);
        partial void OnEnrollmentIdChanged();
        #endregion

        public ReviewHighlight()
        {
            this._Highlight = default(EntityRef<Highlight>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    if (this._Highlight.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnHighlightIdChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightId = value;
                    this.SendPropertyChanged("HighlightId");
                    this.OnHighlightIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReviewId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ReviewId
        {
            get
            {
                return this._ReviewId;
            }
            set
            {
                if ((this._ReviewId != value))
                {
                    this.OnReviewIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewId = value;
                    this.SendPropertyChanged("ReviewId");
                    this.OnReviewIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EnrollmentId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string EnrollmentId
        {
            get
            {
                return this._EnrollmentId;
            }
            set
            {
                if ((this._EnrollmentId != value))
                {
                    this.OnEnrollmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnrollmentId = value;
                    this.SendPropertyChanged("EnrollmentId");
                    this.OnEnrollmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_ReviewHighlight", Storage = "_Highlight", ThisKey = "HighlightId", OtherKey = "HighlightId", IsForeignKey = true)]
        public Highlight Highlight
        {
            get
            {
                return this._Highlight.Entity;
            }
            set
            {
                Highlight previousValue = this._Highlight.Entity;
                if (((previousValue != value)
                            || (this._Highlight.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Highlight.Entity = null;
                        previousValue.ReviewHighlights.Remove(this);
                    }
                    this._Highlight.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewHighlights.Add(this);
                        this._HighlightId = value.HighlightId;
                    }
                    else
                    {
                        this._HighlightId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Highlight");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.ReviewNotes")]
    public partial class ReviewNote : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _NoteId;

        private string _ReviewId;

        private string _ItemId;

        private string _EnrollmentId;

        private EntityRef<Note> _Note;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNoteIdChanging(System.Guid value);
        partial void OnNoteIdChanged();
        partial void OnReviewIdChanging(string value);
        partial void OnReviewIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnEnrollmentIdChanging(string value);
        partial void OnEnrollmentIdChanged();
        #endregion

        public ReviewNote()
        {
            this._Note = default(EntityRef<Note>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    if (this._Note.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNoteIdChanging(value);
                    this.SendPropertyChanging();
                    this._NoteId = value;
                    this.SendPropertyChanged("NoteId");
                    this.OnNoteIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ReviewId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ReviewId
        {
            get
            {
                return this._ReviewId;
            }
            set
            {
                if ((this._ReviewId != value))
                {
                    this.OnReviewIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReviewId = value;
                    this.SendPropertyChanged("ReviewId");
                    this.OnReviewIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EnrollmentId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string EnrollmentId
        {
            get
            {
                return this._EnrollmentId;
            }
            set
            {
                if ((this._EnrollmentId != value))
                {
                    this.OnEnrollmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnrollmentId = value;
                    this.SendPropertyChanged("EnrollmentId");
                    this.OnEnrollmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_ReviewNote", Storage = "_Note", ThisKey = "NoteId", OtherKey = "NoteId", IsForeignKey = true)]
        public Note Note
        {
            get
            {
                return this._Note.Entity;
            }
            set
            {
                Note previousValue = this._Note.Entity;
                if (((previousValue != value)
                            || (this._Note.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Note.Entity = null;
                        previousValue.ReviewNotes.Remove(this);
                    }
                    this._Note.Entity = value;
                    if ((value != null))
                    {
                        value.ReviewNotes.Add(this);
                        this._NoteId = value.NoteId;
                    }
                    else
                    {
                        this._NoteId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Note");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.SubmissionHighlights")]
    public partial class SubmissionHighlight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _HighlightId;

        private string _ItemId;

        private string _EnrollmentId;

        private EntityRef<Highlight> _Highlight;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnHighlightIdChanging(System.Guid value);
        partial void OnHighlightIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnEnrollmentIdChanging(string value);
        partial void OnEnrollmentIdChanged();
        #endregion

        public SubmissionHighlight()
        {
            this._Highlight = default(EntityRef<Highlight>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    if (this._Highlight.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnHighlightIdChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightId = value;
                    this.SendPropertyChanged("HighlightId");
                    this.OnHighlightIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EnrollmentId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string EnrollmentId
        {
            get
            {
                return this._EnrollmentId;
            }
            set
            {
                if ((this._EnrollmentId != value))
                {
                    this.OnEnrollmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnrollmentId = value;
                    this.SendPropertyChanged("EnrollmentId");
                    this.OnEnrollmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Highlight_SubmissionHighlight", Storage = "_Highlight", ThisKey = "HighlightId", OtherKey = "HighlightId", IsForeignKey = true)]
        public Highlight Highlight
        {
            get
            {
                return this._Highlight.Entity;
            }
            set
            {
                Highlight previousValue = this._Highlight.Entity;
                if (((previousValue != value)
                            || (this._Highlight.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Highlight.Entity = null;
                        previousValue.SubmissionHighlights.Remove(this);
                    }
                    this._Highlight.Entity = value;
                    if ((value != null))
                    {
                        value.SubmissionHighlights.Add(this);
                        this._HighlightId = value.HighlightId;
                    }
                    else
                    {
                        this._HighlightId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Highlight");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.SubmissionNotes")]
    public partial class SubmissionNote : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private System.Guid _NoteId;

        private string _ItemId;

        private string _EnrollmentId;

        private EntityRef<Note> _Note;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNoteIdChanging(System.Guid value);
        partial void OnNoteIdChanged();
        partial void OnItemIdChanging(string value);
        partial void OnItemIdChanged();
        partial void OnEnrollmentIdChanging(string value);
        partial void OnEnrollmentIdChanged();
        #endregion

        public SubmissionNote()
        {
            this._Note = default(EntityRef<Note>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    if (this._Note.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNoteIdChanging(value);
                    this.SendPropertyChanging();
                    this._NoteId = value;
                    this.SendPropertyChanged("NoteId");
                    this.OnNoteIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EnrollmentId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string EnrollmentId
        {
            get
            {
                return this._EnrollmentId;
            }
            set
            {
                if ((this._EnrollmentId != value))
                {
                    this.OnEnrollmentIdChanging(value);
                    this.SendPropertyChanging();
                    this._EnrollmentId = value;
                    this.SendPropertyChanged("EnrollmentId");
                    this.OnEnrollmentIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_SubmissionNote", Storage = "_Note", ThisKey = "NoteId", OtherKey = "NoteId", IsForeignKey = true)]
        public Note Note
        {
            get
            {
                return this._Note.Entity;
            }
            set
            {
                Note previousValue = this._Note.Entity;
                if (((previousValue != value)
                            || (this._Note.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Note.Entity = null;
                        previousValue.SubmissionNotes.Remove(this);
                    }
                    this._Note.Entity = value;
                    if ((value != null))
                    {
                        value.SubmissionNotes.Add(this);
                        this._NoteId = value.NoteId;
                    }
                    else
                    {
                        this._NoteId = default(System.Guid);
                    }
                    this.SendPropertyChanged("Note");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UserNoteSettings")]
    public partial class UserNoteSetting : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private string _UserId;

        private string _CourseId;

        private bool _ShowMyNotes;

        private bool _ShowInstructorNotes;

        private bool _ShowMyHighlights;

        private bool _ShowInstructorHighlights;

        private string _HighlightColor;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnCourseIdChanging(string value);
        partial void OnCourseIdChanged();
        partial void OnShowMyNotesChanging(bool value);
        partial void OnShowMyNotesChanged();
        partial void OnShowInstructorNotesChanging(bool value);
        partial void OnShowInstructorNotesChanged();
        partial void OnShowMyHighlightsChanging(bool value);
        partial void OnShowMyHighlightsChanged();
        partial void OnShowInstructorHighlightsChanging(bool value);
        partial void OnShowInstructorHighlightsChanged();
        partial void OnHighlightColorChanging(string value);
        partial void OnHighlightColorChanged();
        #endregion

        public UserNoteSetting()
        {
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this.OnCourseIdChanging(value);
                    this.SendPropertyChanging();
                    this._CourseId = value;
                    this.SendPropertyChanged("CourseId");
                    this.OnCourseIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShowMyNotes", DbType = "Bit NOT NULL")]
        public bool ShowMyNotes
        {
            get
            {
                return this._ShowMyNotes;
            }
            set
            {
                if ((this._ShowMyNotes != value))
                {
                    this.OnShowMyNotesChanging(value);
                    this.SendPropertyChanging();
                    this._ShowMyNotes = value;
                    this.SendPropertyChanged("ShowMyNotes");
                    this.OnShowMyNotesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShowInstructorNotes", DbType = "Bit NOT NULL")]
        public bool ShowInstructorNotes
        {
            get
            {
                return this._ShowInstructorNotes;
            }
            set
            {
                if ((this._ShowInstructorNotes != value))
                {
                    this.OnShowInstructorNotesChanging(value);
                    this.SendPropertyChanging();
                    this._ShowInstructorNotes = value;
                    this.SendPropertyChanged("ShowInstructorNotes");
                    this.OnShowInstructorNotesChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShowMyHighlights", DbType = "Bit NOT NULL")]
        public bool ShowMyHighlights
        {
            get
            {
                return this._ShowMyHighlights;
            }
            set
            {
                if ((this._ShowMyHighlights != value))
                {
                    this.OnShowMyHighlightsChanging(value);
                    this.SendPropertyChanging();
                    this._ShowMyHighlights = value;
                    this.SendPropertyChanged("ShowMyHighlights");
                    this.OnShowMyHighlightsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ShowInstructorHighlights", DbType = "Bit NOT NULL")]
        public bool ShowInstructorHighlights
        {
            get
            {
                return this._ShowInstructorHighlights;
            }
            set
            {
                if ((this._ShowInstructorHighlights != value))
                {
                    this.OnShowInstructorHighlightsChanging(value);
                    this.SendPropertyChanging();
                    this._ShowInstructorHighlights = value;
                    this.SendPropertyChanged("ShowInstructorHighlights");
                    this.OnShowInstructorHighlightsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightColor", DbType = "NVarChar(20) NOT NULL", CanBeNull = false)]
        public string HighlightColor
        {
            get
            {
                return this._HighlightColor;
            }
            set
            {
                if ((this._HighlightColor != value))
                {
                    this.OnHighlightColorChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightColor = value;
                    this.SendPropertyChanged("HighlightColor");
                    this.OnHighlightColorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserNoteSetting", Storage = "_User", ThisKey = "UserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UserNoteSettings.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UserNoteSettings.Add(this);
                        this._UserId = value.UserId;
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _UserId;

        private string _FirstName;

        private string _LastName;

        private EntitySet<UserType> _UserTypes;

        private EntitySet<Highlight> _Highlights;

        private EntitySet<UserNoteSetting> _UserNoteSettings;

        private EntitySet<Note> _Notes;

        private EntitySet<UserShare> _UserShares;

        private EntitySet<UserShare> _UserShares1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        #endregion

        public User()
        {
            this._UserTypes = new EntitySet<UserType>(new Action<UserType>(this.attach_UserTypes), new Action<UserType>(this.detach_UserTypes));
            this._Highlights = new EntitySet<Highlight>(new Action<Highlight>(this.attach_Highlights), new Action<Highlight>(this.detach_Highlights));
            this._UserNoteSettings = new EntitySet<UserNoteSetting>(new Action<UserNoteSetting>(this.attach_UserNoteSettings), new Action<UserNoteSetting>(this.detach_UserNoteSettings));
            this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
            this._UserShares = new EntitySet<UserShare>(new Action<UserShare>(this.attach_UserShares), new Action<UserShare>(this.detach_UserShares));
            this._UserShares1 = new EntitySet<UserShare>(new Action<UserShare>(this.attach_UserShares1), new Action<UserShare>(this.detach_UserShares1));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FirstName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if ((this._FirstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LastName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if ((this._LastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserType", Storage = "_UserTypes", ThisKey = "UserId", OtherKey = "UserId")]
        public EntitySet<UserType> UserTypes
        {
            get
            {
                return this._UserTypes;
            }
            set
            {
                this._UserTypes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Highlight", Storage = "_Highlights", ThisKey = "UserId", OtherKey = "UserId")]
        public EntitySet<Highlight> Highlights
        {
            get
            {
                return this._Highlights;
            }
            set
            {
                this._Highlights.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserNoteSetting", Storage = "_UserNoteSettings", ThisKey = "UserId", OtherKey = "UserId")]
        public EntitySet<UserNoteSetting> UserNoteSettings
        {
            get
            {
                return this._UserNoteSettings;
            }
            set
            {
                this._UserNoteSettings.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Note", Storage = "_Notes", ThisKey = "UserId", OtherKey = "UserId")]
        public EntitySet<Note> Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                this._Notes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserShare", Storage = "_UserShares", ThisKey = "UserId", OtherKey = "UserId")]
        public EntitySet<UserShare> UserShares
        {
            get
            {
                return this._UserShares;
            }
            set
            {
                this._UserShares.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserShare1", Storage = "_UserShares1", ThisKey = "UserId", OtherKey = "SharedUserId")]
        public EntitySet<UserShare> UserShares1
        {
            get
            {
                return this._UserShares1;
            }
            set
            {
                this._UserShares1.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_UserTypes(UserType entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UserTypes(UserType entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Highlights(Highlight entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Highlights(Highlight entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UserNoteSettings(UserNoteSetting entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UserNoteSettings(UserNoteSetting entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Notes(Note entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Notes(Note entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UserShares(UserShare entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_UserShares(UserShare entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_UserShares1(UserShare entity)
        {
            this.SendPropertyChanging();
            entity.User1 = this;
        }

        private void detach_UserShares1(UserShare entity)
        {
            this.SendPropertyChanging();
            entity.User1 = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Note")]
    public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _NoteId;

        private string _UserId;

        private string _Text;

        private string _Description;

        private bool _Public;

        private System.DateTime _Created;

        private System.DateTime _Modified;

        private int _Status;

        private EntitySet<HighlightNote> _HighlightNotes;

        private EntitySet<ItemNote> _ItemNotes;

        private EntitySet<ReviewNote> _ReviewNotes;

        private EntitySet<SubmissionNote> _SubmissionNotes;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNoteIdChanging(System.Guid value);
        partial void OnNoteIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPublicChanging(bool value);
        partial void OnPublicChanged();
        partial void OnCreatedChanging(System.DateTime value);
        partial void OnCreatedChanged();
        partial void OnModifiedChanging(System.DateTime value);
        partial void OnModifiedChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        #endregion

        public Note()
        {
            this._HighlightNotes = new EntitySet<HighlightNote>(new Action<HighlightNote>(this.attach_HighlightNotes), new Action<HighlightNote>(this.detach_HighlightNotes));
            this._ItemNotes = new EntitySet<ItemNote>(new Action<ItemNote>(this.attach_ItemNotes), new Action<ItemNote>(this.detach_ItemNotes));
            this._ReviewNotes = new EntitySet<ReviewNote>(new Action<ReviewNote>(this.attach_ReviewNotes), new Action<ReviewNote>(this.detach_ReviewNotes));
            this._SubmissionNotes = new EntitySet<SubmissionNote>(new Action<SubmissionNote>(this.attach_SubmissionNotes), new Action<SubmissionNote>(this.detach_SubmissionNotes));
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    this.OnNoteIdChanging(value);
                    this.SendPropertyChanging();
                    this._NoteId = value;
                    this.SendPropertyChanged("NoteId");
                    this.OnNoteIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Text", DbType = "NVarChar(MAX)")]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if ((this._Text != value))
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(300)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "[Public]", Storage = "_Public", DbType = "Bit NOT NULL")]
        public bool Public
        {
            get
            {
                return this._Public;
            }
            set
            {
                if ((this._Public != value))
                {
                    this.OnPublicChanging(value);
                    this.SendPropertyChanging();
                    this._Public = value;
                    this.SendPropertyChanged("Public");
                    this.OnPublicChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Created", DbType = "DateTime NOT NULL")]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if ((this._Created != value))
                {
                    this.OnCreatedChanging(value);
                    this.SendPropertyChanging();
                    this._Created = value;
                    this.SendPropertyChanged("Created");
                    this.OnCreatedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Modified", DbType = "DateTime NOT NULL")]
        public System.DateTime Modified
        {
            get
            {
                return this._Modified;
            }
            set
            {
                if ((this._Modified != value))
                {
                    this.OnModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._Modified = value;
                    this.SendPropertyChanged("Modified");
                    this.OnModifiedChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Status", DbType = "Int NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if ((this._Status != value))
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_HighlightNote", Storage = "_HighlightNotes", ThisKey = "NoteId", OtherKey = "NoteId")]
        public EntitySet<HighlightNote> HighlightNotes
        {
            get
            {
                return this._HighlightNotes;
            }
            set
            {
                this._HighlightNotes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_ItemNote", Storage = "_ItemNotes", ThisKey = "NoteId", OtherKey = "NoteId")]
        public EntitySet<ItemNote> ItemNotes
        {
            get
            {
                return this._ItemNotes;
            }
            set
            {
                this._ItemNotes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_ReviewNote", Storage = "_ReviewNotes", ThisKey = "NoteId", OtherKey = "NoteId")]
        public EntitySet<ReviewNote> ReviewNotes
        {
            get
            {
                return this._ReviewNotes;
            }
            set
            {
                this._ReviewNotes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Note_SubmissionNote", Storage = "_SubmissionNotes", ThisKey = "NoteId", OtherKey = "NoteId")]
        public EntitySet<SubmissionNote> SubmissionNotes
        {
            get
            {
                return this._SubmissionNotes;
            }
            set
            {
                this._SubmissionNotes.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_Note", Storage = "_User", ThisKey = "UserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Notes.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Notes.Add(this);
                        this._UserId = value.UserId;
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_HighlightNotes(HighlightNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = this;
        }

        private void detach_HighlightNotes(HighlightNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = null;
        }

        private void attach_ItemNotes(ItemNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = this;
        }

        private void detach_ItemNotes(ItemNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = null;
        }

        private void attach_ReviewNotes(ReviewNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = this;
        }

        private void detach_ReviewNotes(ReviewNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = null;
        }

        private void attach_SubmissionNotes(SubmissionNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = this;
        }

        private void detach_SubmissionNotes(SubmissionNote entity)
        {
            this.SendPropertyChanging();
            entity.Note = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UserShares")]
    public partial class UserShare : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private string _UserId;

        private string _SharedUserId;

        private string _CourseId;

        private bool _HighlightsEnabled;

        private string _HighlightColor;

        private bool _NotesEnabled;

        private EntityRef<User> _User;

        private EntityRef<User> _User1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnSharedUserIdChanging(string value);
        partial void OnSharedUserIdChanged();
        partial void OnCourseIdChanging(string value);
        partial void OnCourseIdChanged();
        partial void OnHighlightsEnabledChanging(bool value);
        partial void OnHighlightsEnabledChanged();
        partial void OnHighlightColorChanging(string value);
        partial void OnHighlightColorChanged();
        partial void OnNotesEnabledChanging(bool value);
        partial void OnNotesEnabledChanged();
        #endregion

        public UserShare()
        {
            this._User = default(EntityRef<User>);
            this._User1 = default(EntityRef<User>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SharedUserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SharedUserId
        {
            get
            {
                return this._SharedUserId;
            }
            set
            {
                if ((this._SharedUserId != value))
                {
                    if (this._User1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSharedUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._SharedUserId = value;
                    this.SendPropertyChanged("SharedUserId");
                    this.OnSharedUserIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this.OnCourseIdChanging(value);
                    this.SendPropertyChanging();
                    this._CourseId = value;
                    this.SendPropertyChanged("CourseId");
                    this.OnCourseIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightsEnabled", DbType = "Bit NOT NULL")]
        public bool HighlightsEnabled
        {
            get
            {
                return this._HighlightsEnabled;
            }
            set
            {
                if ((this._HighlightsEnabled != value))
                {
                    this.OnHighlightsEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightsEnabled = value;
                    this.SendPropertyChanged("HighlightsEnabled");
                    this.OnHighlightsEnabledChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightColor", DbType = "NVarChar(20)")]
        public string HighlightColor
        {
            get
            {
                return this._HighlightColor;
            }
            set
            {
                if ((this._HighlightColor != value))
                {
                    this.OnHighlightColorChanging(value);
                    this.SendPropertyChanging();
                    this._HighlightColor = value;
                    this.SendPropertyChanged("HighlightColor");
                    this.OnHighlightColorChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NotesEnabled", DbType = "Bit NOT NULL")]
        public bool NotesEnabled
        {
            get
            {
                return this._NotesEnabled;
            }
            set
            {
                if ((this._NotesEnabled != value))
                {
                    this.OnNotesEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._NotesEnabled = value;
                    this.SendPropertyChanged("NotesEnabled");
                    this.OnNotesEnabledChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserShare", Storage = "_User", ThisKey = "UserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.UserShares.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.UserShares.Add(this);
                        this._UserId = value.UserId;
                    }
                    else
                    {
                        this._UserId = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "User_UserShare1", Storage = "_User1", ThisKey = "SharedUserId", OtherKey = "UserId", IsForeignKey = true)]
        public User User1
        {
            get
            {
                return this._User1.Entity;
            }
            set
            {
                User previousValue = this._User1.Entity;
                if (((previousValue != value)
                            || (this._User1.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User1.Entity = null;
                        previousValue.UserShares1.Remove(this);
                    }
                    this._User1.Entity = value;
                    if ((value != null))
                    {
                        value.UserShares1.Add(this);
                        this._SharedUserId = value.UserId;
                    }
                    else
                    {
                        this._SharedUserId = default(string);
                    }
                    this.SendPropertyChanged("User1");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public partial class GetNoteCountResult
    {

        private System.Nullable<int> _HighlightCount;

        private System.Nullable<int> _NoteCount;

        public GetNoteCountResult()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightCount", DbType = "Int")]
        public System.Nullable<int> HighlightCount
        {
            get
            {
                return this._HighlightCount;
            }
            set
            {
                if ((this._HighlightCount != value))
                {
                    this._HighlightCount = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteCount", DbType = "Int")]
        public System.Nullable<int> NoteCount
        {
            get
            {
                return this._NoteCount;
            }
            set
            {
                if ((this._NoteCount != value))
                {
                    this._NoteCount = value;
                }
            }
        }
    }

    public partial class GetNotesByUserResult
    {

        private System.Nullable<System.Guid> _HighlightId;

        private System.Guid _NoteId;

        private string _UserId;

        private string _Text;

        private string _Description;

        private bool _Public;

        private int _Status;

        private string _ItemId;

        private string _CourseId;

        private System.DateTime _Created;

        private System.DateTime _Modified;

        public GetNotesByUserResult()
        {
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HighlightId", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> HighlightId
        {
            get
            {
                return this._HighlightId;
            }
            set
            {
                if ((this._HighlightId != value))
                {
                    this._HighlightId = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NoteId", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NoteId
        {
            get
            {
                return this._NoteId;
            }
            set
            {
                if ((this._NoteId != value))
                {
                    this._NoteId = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if ((this._UserId != value))
                {
                    this._UserId = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Text", DbType = "NVarChar(MAX)")]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if ((this._Text != value))
                {
                    this._Text = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(300) NOT NULL", CanBeNull = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "[Public]", Storage = "_Public", DbType = "Bit NOT NULL")]
        public bool Public
        {
            get
            {
                return this._Public;
            }
            set
            {
                if ((this._Public != value))
                {
                    this._Public = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Status", DbType = "Int NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if ((this._Status != value))
                {
                    this._Status = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if ((this._ItemId != value))
                {
                    this._ItemId = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CourseId", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string CourseId
        {
            get
            {
                return this._CourseId;
            }
            set
            {
                if ((this._CourseId != value))
                {
                    this._CourseId = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Created", DbType = "DateTime NOT NULL")]
        public System.DateTime Created
        {
            get
            {
                return this._Created;
            }
            set
            {
                if ((this._Created != value))
                {
                    this._Created = value;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Modified", DbType = "DateTime NOT NULL")]
        public System.DateTime Modified
        {
            get
            {
                return this._Modified;
            }
            set
            {
                if ((this._Modified != value))
                {
                    this._Modified = value;
                }
            }
        }
    }
}
#pragma warning restore 1591
