#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bfw.PX.Comments.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PX_Comments")]
	public partial class PxCommentsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHighlightComment(HighlightComment instance);
    partial void UpdateHighlightComment(HighlightComment instance);
    partial void DeleteHighlightComment(HighlightComment instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertHighlight(Highlight instance);
    partial void UpdateHighlight(Highlight instance);
    partial void DeleteHighlight(Highlight instance);
    #endregion
		
		public PxCommentsDataContext() : 
				base(global::Bfw.PX.Comments.Data.Properties.Settings.Default.PX_CommentsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PxCommentsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PxCommentsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PxCommentsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PxCommentsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HighlightComment> HighlightComments
		{
			get
			{
				return this.GetTable<HighlightComment>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Highlight> Highlights
		{
			get
			{
				return this.GetTable<Highlight>();
			}
		}
	}
	
	[Table(Name="dbo.HighlightComment")]
	public partial class HighlightComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FK_HighlightId;
		
		private int _FK_CommentId;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Highlight> _Highlight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFK_HighlightIdChanging(int value);
    partial void OnFK_HighlightIdChanged();
    partial void OnFK_CommentIdChanging(int value);
    partial void OnFK_CommentIdChanged();
    #endregion
		
		public HighlightComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Highlight = default(EntityRef<Highlight>);
			OnCreated();
		}
		
		[Column(Storage="_FK_HighlightId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FK_HighlightId
		{
			get
			{
				return this._FK_HighlightId;
			}
			set
			{
				if ((this._FK_HighlightId != value))
				{
					if (this._Highlight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_HighlightIdChanging(value);
					this.SendPropertyChanging();
					this._FK_HighlightId = value;
					this.SendPropertyChanged("FK_HighlightId");
					this.OnFK_HighlightIdChanged();
				}
			}
		}
		
		[Column(Storage="_FK_CommentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FK_CommentId
		{
			get
			{
				return this._FK_CommentId;
			}
			set
			{
				if ((this._FK_CommentId != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CommentIdChanging(value);
					this.SendPropertyChanging();
					this._FK_CommentId = value;
					this.SendPropertyChanged("FK_CommentId");
					this.OnFK_CommentIdChanged();
				}
			}
		}
		
		[Association(Name="Comment_HighlightComment", Storage="_Comment", ThisKey="FK_CommentId", OtherKey="commentId", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.HighlightComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.HighlightComments.Add(this);
						this._FK_CommentId = value.commentId;
					}
					else
					{
						this._FK_CommentId = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[Association(Name="Highlight_HighlightComment", Storage="_Highlight", ThisKey="FK_HighlightId", OtherKey="highlightId", IsForeignKey=true)]
		public Highlight Highlight
		{
			get
			{
				return this._Highlight.Entity;
			}
			set
			{
				Highlight previousValue = this._Highlight.Entity;
				if (((previousValue != value) 
							|| (this._Highlight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Highlight.Entity = null;
						previousValue.HighlightComments.Remove(this);
					}
					this._Highlight.Entity = value;
					if ((value != null))
					{
						value.HighlightComments.Add(this);
						this._FK_HighlightId = value.highlightId;
					}
					else
					{
						this._FK_HighlightId = default(int);
					}
					this.SendPropertyChanged("Highlight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentId;
		
		private int _userId;
		
		private string _commentText;
		
		private System.DateTime _dateAdded;
		
		private string _userFirstName;
		
		private string _userLastName;
		
		private int _userAccessLevel;
		
		private bool _isBookmarked;
		
		private EntitySet<HighlightComment> _HighlightComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentIdChanging(int value);
    partial void OncommentIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OncommentTextChanging(string value);
    partial void OncommentTextChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnuserFirstNameChanging(string value);
    partial void OnuserFirstNameChanged();
    partial void OnuserLastNameChanging(string value);
    partial void OnuserLastNameChanged();
    partial void OnuserAccessLevelChanging(int value);
    partial void OnuserAccessLevelChanged();
    partial void OnisBookmarkedChanging(bool value);
    partial void OnisBookmarkedChanged();
    #endregion
		
		public Comment()
		{
			this._HighlightComments = new EntitySet<HighlightComment>(new Action<HighlightComment>(this.attach_HighlightComments), new Action<HighlightComment>(this.detach_HighlightComments));
			OnCreated();
		}
		
		[Column(Storage="_commentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int commentId
		{
			get
			{
				return this._commentId;
			}
			set
			{
				if ((this._commentId != value))
				{
					this.OncommentIdChanging(value);
					this.SendPropertyChanging();
					this._commentId = value;
					this.SendPropertyChanged("commentId");
					this.OncommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[Column(Storage="_commentText", DbType="VarChar(160) NOT NULL", CanBeNull=false)]
		public string commentText
		{
			get
			{
				return this._commentText;
			}
			set
			{
				if ((this._commentText != value))
				{
					this.OncommentTextChanging(value);
					this.SendPropertyChanging();
					this._commentText = value;
					this.SendPropertyChanged("commentText");
					this.OncommentTextChanged();
				}
			}
		}
		
		[Column(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_userFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string userFirstName
		{
			get
			{
				return this._userFirstName;
			}
			set
			{
				if ((this._userFirstName != value))
				{
					this.OnuserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._userFirstName = value;
					this.SendPropertyChanged("userFirstName");
					this.OnuserFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_userLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string userLastName
		{
			get
			{
				return this._userLastName;
			}
			set
			{
				if ((this._userLastName != value))
				{
					this.OnuserLastNameChanging(value);
					this.SendPropertyChanging();
					this._userLastName = value;
					this.SendPropertyChanged("userLastName");
					this.OnuserLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_userAccessLevel", DbType="Int NOT NULL")]
		public int userAccessLevel
		{
			get
			{
				return this._userAccessLevel;
			}
			set
			{
				if ((this._userAccessLevel != value))
				{
					this.OnuserAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._userAccessLevel = value;
					this.SendPropertyChanged("userAccessLevel");
					this.OnuserAccessLevelChanged();
				}
			}
		}
		
		[Column(Storage="_isBookmarked", DbType="Bit NOT NULL")]
		public bool isBookmarked
		{
			get
			{
				return this._isBookmarked;
			}
			set
			{
				if ((this._isBookmarked != value))
				{
					this.OnisBookmarkedChanging(value);
					this.SendPropertyChanging();
					this._isBookmarked = value;
					this.SendPropertyChanged("isBookmarked");
					this.OnisBookmarkedChanged();
				}
			}
		}
		
		[Association(Name="Comment_HighlightComment", Storage="_HighlightComments", ThisKey="commentId", OtherKey="FK_CommentId")]
		public EntitySet<HighlightComment> HighlightComments
		{
			get
			{
				return this._HighlightComments;
			}
			set
			{
				this._HighlightComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HighlightComments(HighlightComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_HighlightComments(HighlightComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[Table(Name="dbo.Highlight")]
	public partial class Highlight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _highlightId;
		
		private string _highlightText;
		
		private System.DateTime _dateAdded;
		
		private int _userId;
		
		private string _itemId;
		
		private int _courseId;
		
		private int _userAccessLevel;
		
		private bool _isActive;
		
		private bool _isShared;
		
		private global::Bfw.PX.Comments.Data.HighlightType _highlightType;
		
		private string _secondaryId;
		
		private bool _isGeneral;
		
		private string _description;
		
		private string _reviewId;
		
		private EntitySet<HighlightComment> _HighlightComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhighlightIdChanging(int value);
    partial void OnhighlightIdChanged();
    partial void OnhighlightTextChanging(string value);
    partial void OnhighlightTextChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnitemIdChanging(string value);
    partial void OnitemIdChanged();
    partial void OncourseIdChanging(int value);
    partial void OncourseIdChanged();
    partial void OnuserAccessLevelChanging(int value);
    partial void OnuserAccessLevelChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnisSharedChanging(bool value);
    partial void OnisSharedChanged();
    partial void OnhighlightTypeChanging(global::Bfw.PX.Comments.Data.HighlightType value);
    partial void OnhighlightTypeChanged();
    partial void OnsecondaryIdChanging(string value);
    partial void OnsecondaryIdChanged();
    partial void OnisGeneralChanging(bool value);
    partial void OnisGeneralChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnreviewIdChanging(string value);
    partial void OnreviewIdChanged();
    #endregion
		
		public Highlight()
		{
			this._HighlightComments = new EntitySet<HighlightComment>(new Action<HighlightComment>(this.attach_HighlightComments), new Action<HighlightComment>(this.detach_HighlightComments));
			OnCreated();
		}
		
		[Column(Storage="_highlightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int highlightId
		{
			get
			{
				return this._highlightId;
			}
			set
			{
				if ((this._highlightId != value))
				{
					this.OnhighlightIdChanging(value);
					this.SendPropertyChanging();
					this._highlightId = value;
					this.SendPropertyChanged("highlightId");
					this.OnhighlightIdChanged();
				}
			}
		}
		
		[Column(Storage="_highlightText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string highlightText
		{
			get
			{
				return this._highlightText;
			}
			set
			{
				if ((this._highlightText != value))
				{
					this.OnhighlightTextChanging(value);
					this.SendPropertyChanging();
					this._highlightText = value;
					this.SendPropertyChanged("highlightText");
					this.OnhighlightTextChanged();
				}
			}
		}
		
		[Column(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[Column(Storage="_itemId", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[Column(Storage="_courseId", DbType="Int NOT NULL")]
		public int courseId
		{
			get
			{
				return this._courseId;
			}
			set
			{
				if ((this._courseId != value))
				{
					this.OncourseIdChanging(value);
					this.SendPropertyChanging();
					this._courseId = value;
					this.SendPropertyChanged("courseId");
					this.OncourseIdChanged();
				}
			}
		}
		
		[Column(Storage="_userAccessLevel", DbType="Int NOT NULL")]
		public int userAccessLevel
		{
			get
			{
				return this._userAccessLevel;
			}
			set
			{
				if ((this._userAccessLevel != value))
				{
					this.OnuserAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._userAccessLevel = value;
					this.SendPropertyChanged("userAccessLevel");
					this.OnuserAccessLevelChanged();
				}
			}
		}
		
		[Column(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[Column(Storage="_isShared", DbType="Bit NOT NULL")]
		public bool isShared
		{
			get
			{
				return this._isShared;
			}
			set
			{
				if ((this._isShared != value))
				{
					this.OnisSharedChanging(value);
					this.SendPropertyChanging();
					this._isShared = value;
					this.SendPropertyChanged("isShared");
					this.OnisSharedChanged();
				}
			}
		}
		
		[Column(Storage="_highlightType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::Bfw.PX.Comments.Data.HighlightType highlightType
		{
			get
			{
				return this._highlightType;
			}
			set
			{
				if ((this._highlightType != value))
				{
					this.OnhighlightTypeChanging(value);
					this.SendPropertyChanging();
					this._highlightType = value;
					this.SendPropertyChanged("highlightType");
					this.OnhighlightTypeChanged();
				}
			}
		}
		
		[Column(Storage="_secondaryId", DbType="VarChar(250)")]
		public string secondaryId
		{
			get
			{
				return this._secondaryId;
			}
			set
			{
				if ((this._secondaryId != value))
				{
					this.OnsecondaryIdChanging(value);
					this.SendPropertyChanging();
					this._secondaryId = value;
					this.SendPropertyChanged("secondaryId");
					this.OnsecondaryIdChanged();
				}
			}
		}
		
		[Column(Storage="_isGeneral", DbType="Bit NOT NULL")]
		public bool isGeneral
		{
			get
			{
				return this._isGeneral;
			}
			set
			{
				if ((this._isGeneral != value))
				{
					this.OnisGeneralChanging(value);
					this.SendPropertyChanging();
					this._isGeneral = value;
					this.SendPropertyChanged("isGeneral");
					this.OnisGeneralChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(300)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_reviewId", DbType="VarChar(250)")]
		public string reviewId
		{
			get
			{
				return this._reviewId;
			}
			set
			{
				if ((this._reviewId != value))
				{
					this.OnreviewIdChanging(value);
					this.SendPropertyChanging();
					this._reviewId = value;
					this.SendPropertyChanged("reviewId");
					this.OnreviewIdChanged();
				}
			}
		}
		
		[Association(Name="Highlight_HighlightComment", Storage="_HighlightComments", ThisKey="highlightId", OtherKey="FK_HighlightId")]
		public EntitySet<HighlightComment> HighlightComments
		{
			get
			{
				return this._HighlightComments;
			}
			set
			{
				this._HighlightComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HighlightComments(HighlightComment entity)
		{
			this.SendPropertyChanging();
			entity.Highlight = this;
		}
		
		private void detach_HighlightComments(HighlightComment entity)
		{
			this.SendPropertyChanging();
			entity.Highlight = null;
		}
	}
}
#pragma warning restore 1591
